from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class NewRecording(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concert_id=None, duration=None, source_info=None, url=None):  # noqa: E501
        """NewRecording - a model defined in OpenAPI

        :param concert_id: The concert_id of this NewRecording.  # noqa: E501
        :type concert_id: int
        :param duration: The duration of this NewRecording.  # noqa: E501
        :type duration: int
        :param source_info: The source_info of this NewRecording.  # noqa: E501
        :type source_info: str
        :param url: The url of this NewRecording.  # noqa: E501
        :type url: str
        """
        self.openapi_types = {
            'concert_id': int,
            'duration': int,
            'source_info': str,
            'url': str
        }

        self.attribute_map = {
            'concert_id': 'concert_id',
            'duration': 'duration',
            'source_info': 'source_info',
            'url': 'url'
        }

        self._concert_id = concert_id
        self._duration = duration
        self._source_info = source_info
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'NewRecording':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewRecording of this NewRecording.  # noqa: E501
        :rtype: NewRecording
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concert_id(self) -> int:
        """Gets the concert_id of this NewRecording.


        :return: The concert_id of this NewRecording.
        :rtype: int
        """
        return self._concert_id

    @concert_id.setter
    def concert_id(self, concert_id: int):
        """Sets the concert_id of this NewRecording.


        :param concert_id: The concert_id of this NewRecording.
        :type concert_id: int
        """
        if concert_id is None:
            raise ValueError("Invalid value for `concert_id`, must not be `None`")  # noqa: E501

        self._concert_id = concert_id

    @property
    def duration(self) -> int:
        """Gets the duration of this NewRecording.


        :return: The duration of this NewRecording.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration: int):
        """Sets the duration of this NewRecording.


        :param duration: The duration of this NewRecording.
        :type duration: int
        """

        self._duration = duration

    @property
    def source_info(self) -> str:
        """Gets the source_info of this NewRecording.


        :return: The source_info of this NewRecording.
        :rtype: str
        """
        return self._source_info

    @source_info.setter
    def source_info(self, source_info: str):
        """Sets the source_info of this NewRecording.


        :param source_info: The source_info of this NewRecording.
        :type source_info: str
        """

        self._source_info = source_info

    @property
    def url(self) -> str:
        """Gets the url of this NewRecording.


        :return: The url of this NewRecording.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this NewRecording.


        :param url: The url of this NewRecording.
        :type url: str
        """

        self._url = url
