from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Song(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, names=None):  # noqa: E501
        """Song - a model defined in OpenAPI

        :param id: The id of this Song.  # noqa: E501
        :type id: int
        :param names: The names of this Song.  # noqa: E501
        :type names: List[str]
        """
        self.openapi_types = {
            'id': int,
            'names': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'names': 'names'
        }

        self._id = id
        self._names = names

    @classmethod
    def from_dict(cls, dikt) -> 'Song':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Song of this Song.  # noqa: E501
        :rtype: Song
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Song.


        :return: The id of this Song.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Song.


        :param id: The id of this Song.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def names(self) -> List[str]:
        """Gets the names of this Song.


        :return: The names of this Song.
        :rtype: List[str]
        """
        return self._names

    @names.setter
    def names(self, names: List[str]):
        """Sets the names of this Song.


        :param names: The names of this Song.
        :type names: List[str]
        """
        if names is None:
            raise ValueError("Invalid value for `names`, must not be `None`")  # noqa: E501

        self._names = names
